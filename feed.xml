<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://project-omelet.github.io/</id><title>Luke's space</title><subtitle>A minimal, responsive, and powerful Jekyll theme for presenting professional writing.</subtitle> <updated>2022-07-06T10:02:39+09:00</updated> <author> <name>Luke Lee</name> <uri>https://project-omelet.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://project-omelet.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="ko-KR" href="https://project-omelet.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2022 Luke Lee </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>React란?</title><link href="https://project-omelet.github.io/posts/introduction-of-react/" rel="alternate" type="text/html" title="React란?" /><published>2022-07-06T10:01:00+09:00</published> <updated>2022-07-06T10:01:00+09:00</updated> <id>https://project-omelet.github.io/posts/introduction-of-react/</id> <content src="https://project-omelet.github.io/posts/introduction-of-react/" /> <author> <name>Luke</name> </author> <category term="Web" /> <category term="React" /> <summary> 이번 포스트에서는 리액트란 무엇인지 알아보고 프로젝트를 생성하는 것 까지를 다루겠습니다 React? 공식적으로 리액트는 사용자 인터페이스를 만들기 위한 라이브러리 입니다. 리액트는 프레임워크가 아니며, 심지어 웹에서만 사용할 수 있는 것도 아닙니다. 리액트는 다른 라이브러리들과 함께 특정 환경을 렌더링하는 데 사용됩니다. 예를 들면, 웹 환경에서는 React, 모바일 환경에서는 React-Native, VR 환경은 React 360을 사용하여 구현이 가능합니다. React360의 경우 2020년 이후 PR, Issue 등이 업데이트되지 않고 있습니다. 아무래도 VR을 구현하기에 좋은 프레임워크가 많기 때문이라 추측됩니다. 웹을 만들 때는 ReactDOM과 함께 사용합니다. React +... </summary> </entry> <entry><title>WebAssembly 만들기</title><link href="https://project-omelet.github.io/posts/make-wasm/" rel="alternate" type="text/html" title="WebAssembly 만들기" /><published>2022-07-01T17:18:00+09:00</published> <updated>2022-07-01T17:18:00+09:00</updated> <id>https://project-omelet.github.io/posts/make-wasm/</id> <content src="https://project-omelet.github.io/posts/make-wasm/" /> <author> <name>Luke</name> </author> <category term="Web" /> <category term="WebAssembly" /> <summary> 이번 포스팅에서는 C/C++ 언어로 작성된 웹어셈블리 파일(.wasm)을 생성하는 방법을 알아보겠습니다 사용할 도구 Emscripten C/C++ 언어를 웹어셈블리로 변환하는 컴파일러입니다 지금부터 Emscripten SDK의 설치 방법을 알아보겠습니다 공식 권장 환경은 Linux/MacOS 입니다 윈도우를 사용하시는 개발자 분이라도 WSL2를 이용하여 리눅스 환경에서 작업하시는 것을 권장 드립니다만, 윈도우 환경에서의 설정도 알아보도록 하겠습니다 설치 순서 Python 설치 Emscripten 실행을 위해서는 파이썬 3.6 이상의 버전이 필요합니다 파이썬 설치 방법은 따로 안내하지는 않겠습니다 Emscripten SDK Download &amp;amp; Install 먼저 git clon... </summary> </entry> <entry><title>WebAssembly란</title><link href="https://project-omelet.github.io/posts/webassembly/" rel="alternate" type="text/html" title="WebAssembly란" /><published>2022-06-30T13:12:00+09:00</published> <updated>2022-06-30T13:12:00+09:00</updated> <id>https://project-omelet.github.io/posts/webassembly/</id> <content src="https://project-omelet.github.io/posts/webassembly/" /> <author> <name>Luke</name> </author> <category term="Web" /> <category term="WebAssembly" /> <summary> 이번 포스팅에서는 WebAssembly에 대해 알아보도록 하겠습니다 WebAssembly란? MDN 문서에 따르면, “최신 웹 브라우저에서 실행할 수 있는 새로운 유형의 코드” 라고 소개하고 있습니다. 웹어셈블리는 기존에 사용하던 C, C++, Rust 같은 low-level 언어를 컴파일하여 생성하게 됩니다. 즉, 사용하기 위해 새로운 언어를 익히는 개념이 아니라, 기존에 사용하던 언어를 웹에 올려서 사용할 수 있는 코드 정도로 이해하시면 됩니다. 그렇다면, 단순히 코드를 재사용할 수 있다 라는 장점만 있을까요? 이 점도 충분히 사용하기에 매력적인 이유지만, 가장 매력적인 부분은 아닙니다. 웹어셈블리의 가장 매력적인 점은 Native에 근접한 성능에 있습니다 왜 빠를까? 브라우저... </summary> </entry> <entry><title>MaterialApp Widget</title><link href="https://project-omelet.github.io/posts/basic-widget-materialApp/" rel="alternate" type="text/html" title="MaterialApp Widget" /><published>2022-06-29T17:08:00+09:00</published> <updated>2022-06-29T17:08:00+09:00</updated> <id>https://project-omelet.github.io/posts/basic-widget-materialApp/</id> <content src="https://project-omelet.github.io/posts/basic-widget-materialApp/" /> <author> <name>Luke</name> </author> <category term="Flutter" /> <category term="Basic" /> <summary> MaterialApp MaterialApp은 이름 그대로 material style의 App widget 가장 바깥 쪽에 위치하는 widget 모든 widget은 MaterialApp widget의 하위에 위치 Properties 가장 많이 사용하는 대표적인 properties title title: 'My App' App의 한 줄 설명 Android의 경우 최근 사용한 앱에 표시 IOS는 의미가 없음 theme theme: ThemeData( // light/dart mode brightness: Brigntness.light, // Primary color primaryColor... </summary> </entry> <entry><title>Flutter 개요</title><link href="https://project-omelet.github.io/posts/introduction-of-flutter/" rel="alternate" type="text/html" title="Flutter 개요" /><published>2022-06-29T13:50:00+09:00</published> <updated>2022-06-29T15:04:47+09:00</updated> <id>https://project-omelet.github.io/posts/introduction-of-flutter/</id> <content src="https://project-omelet.github.io/posts/introduction-of-flutter/" /> <author> <name>Luke</name> </author> <category term="Flutter" /> <category term="Study" /> <summary> Why Flutter? Cross Platform IOS, Android, Web, Desktop application을 one source로 구현 Performance 대표적으로 비교할 만한 platform은 React-Native(RN)이 있다 과거에는 많은 차이를 보였으나, Hermes engine의 도입으로 native에 근접한 성능을 보인다하여 Flutter가 성능면으로 이점을 갖는 것은 과거의 일이 되었다 네이티브와 비교했을 때, 네이티브보다 빠를 수는 없지만 근접한 성능을 낸다 Structure Start Flutter! Environment 책 or Web site를 참고 공식 사이트: Install Dart Made by Google 주요 개념 ... </summary> </entry> </feed>
